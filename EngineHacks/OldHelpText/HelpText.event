
//Credit to Vesly for his ExtendWeaponDescBox assembly and for getting the Flashing Arrow to appear for MultipleHelpTextPages (HelpBoxOnOpenHook and FlashIcon)

/*
Important take-aways if you're not reading the rest of the comments
- If you've already installed Vesly's ExtendWeaponDescBox, you can either comment out the installation you already have or comment out its inclusion in this file on line 144 
- To exclude/include modules, comment/uncomment definitions made below (starts on line 35)
- Most of these modules require an edit to MSS. Look at the file included in Reference to see what kind of changes you need. To quickly find out changes, search for the definition (e.g. USE_HELP_TEXT_CALC) in RText.event.
- In order to identify most of the new types of helptext, they are given an id in a range that starts with 0xFF01. They are read the same way that items are identified. If item id 0xFF is an indestructible item, then nothing wrong should occur. If the item has durability/stores any data in the durability byte, change the ranges used in HelpTextIdTable to an item id that is indestructible (except for 0xFFFE, which is used by SaveFileHelpTextLink)
*/

/*
Help Text
There is a vanilla mechanic where the player can press "R" on certain elements during gameplay. When the player looks at a weapon, for instance, not only does the text id for that weapon show, but the game will also display other characteristics (I usually refer to these as "labels") and values within those characteristics (e.g. 8 might, 5 crit, etc.)

This assembly edits that mechanic so that other types of help text can be more easily created. When those types are being viewed, labels and values for those labels can also be displayed. Due to the both the size of this assembly and its contents mostly being optional includes, the installation process is "carried out" over several files instead of all of it being contained within this file.

Here are the subfolders that are included in HelpText:
- _HelpTextEssentials: This handles the base game types of helptext (weapons/tomes, staves, and save file), the new process for determining what type of helptext is being viewed, and edited routines for when the game needs to see if there are labels, values, and additional space needed.
- ExtendWeaponDescBox: This assembly by Vesly allows the helptext box to display up to 5 lines of text. Some of the optional modules require this functionality, so it's been included. If you are already using this assembly, feel free to either comment out its inclusion (either the one in this file or wherever else you have it in your buildfile).
- Modules: All of the optional assembly has its own subfolder within this subfolder. Further installation is handled in each used subfolder.
- Reference: Unless you are only installing HelpText to have multiple pages for items, you will need to edit MSS for the optional modules to work (in particular, RText.event). This file isn't actually being installed; it only exists as an example to the modifications needed for your own MSS setup. To quickly find out changes, search for the definition (e.g. USE_HELP_TEXT_CALC) in RText.event.
- StatScreen_HelpBoxIdle: In vanilla, there is a routine that checks if the cursor can move to wherever the player is trying to go on the stat screen. The edited version of this routine has its own folder and installation to account for the multiple optional module configurations that are possible.

Here are all of the optional modules that this assembly contains. Beside More Staff Info, they require some sort of edit to RText.event (see Reference).
- Help Text Text: This file directly edits text ids for the other modules to use. Keeping this uncommented/unedited is ideal for previewing modules that you're interested in. However, once you've decided on what to actually use, you may want to either comment out the definition or edit the text ids this file uses to avoid conflicts.
- Multiple Help Text Pages: This modules allows the player to press "A" to access another page of helptext. This includes items by default, but there's also functionality added for character descriptions to go to promotion details and additional pages for skills.
- More Staff Info: This modules adds more information to be displayed when a staff is being viewed. By default, EXP and WEXP are shown.
- Weapon Ranks: This module adds viewable WEXP and the WEXP needed to reach the next rank for a given weapon rank.
- Calc: This modules adds a blurb of text describing how a battle stat is calculated. This is specifically for battle stats shown on Page 2 of the Stat Screen.
- Character: This modules adds an age and pronoun blurb as the first line of a character description. If the player presses "A" on a unit that can still promote, this will also show promotion benefits.
- Skills: This module adds information about the specific skill being viewed. By default, information to display includes an active/inactive indicator and an amount calculator.
*/

//#define USE_HELP_TEXT_TEXT

#define USE_HELP_TEXT_MULTIPLE_PAGES
#define USE_HELP_TEXT_MORE_STAFF_INFO
#define USE_HELP_TEXT_WEAPON_RANK
//#define USE_HELP_TEXT_CALC
#define USE_HELP_TEXT_CHARACTER
#define USE_HELP_TEXT_SKILL

//Force multipage installation if other specific modules are being used

#ifdef USE_HELP_TEXT_CHARACTER
	#ifndef USE_HELP_TEXT_MULTIPLE_PAGES
		#define USE_HELP_TEXT_MULTIPLE_PAGES
	#endif //USE_HELP_TEXT_MULTIPLE_PAGES
#else
	#ifdef USE_HELP_TEXT_SKILL
		#ifndef USE_HELP_TEXT_MULTIPLE_PAGES
			#define USE_HELP_TEXT_MULTIPLE_PAGES
		#endif //USE_HELP_TEXT_MULTIPLE_PAGES
	#endif //USE_HELP_TEXT_SKILL
#endif //USE_HELP_TEXT_CHARACTER

#ifdef USE_HELP_TEXT_TEXT
	#include "HelpTextText.event"
#endif



//-------------------------------------------
//WIZARD CHECKPOINT
//Do not touch anything below unless you know what you're doing
//-------------------------------------------



/*
Different types of helptext has been incorporated by using the same spot in the proc when looking at items/save files. For this reason, ids in HelpTextIdTable start at 0xFF01. Things that require a different method of verification are in HelpTextTypeList.
If you have an item with an id of 0xFF, there shouldn't be any problems if that item is 
indestructible. If the durability on that item is being tracked, then you will want to change the ids in HelpTextIdTable to an indestructible item (e.g. if 0x80 is indestructible, use 0x8001, 0x8002, etc.).
*/

#define HTITE(helpTextTypeFirstId,helpTextTypeRange,addAdditionalSpaceRoutine,labelWritingRoutine,numberWritingRoutine) "SHORT helpTextTypeFirstId helpTextTypeFirstId+helpTextTypeRange-1; POIN addAdditionalSpaceRoutine labelWritingRoutine numberWritingRoutine "
#define HTITE(helpTextTypeFirstId,helpTextTypeRange,addAdditionalSpaceRoutine,writingRoutine) "SHORT helpTextTypeFirstId helpTextTypeFirstId+helpTextTypeRange-1; POIN addAdditionalSpaceRoutine writingRoutine; WORD 0"

#define HTTLE(identifyTypeRoutine,addAdditionalSpaceRoutine,labelWritingRoutine,numberWritingRoutine) "POIN identifyTypeRoutine addAdditionalSpaceRoutine labelWritingRoutine numberWritingRoutine"
#define HTTLE(identifyTypeRoutine,addAdditionalSpaceRoutine,writingRoutine) "POIN identifyTypeRoutine addAdditionalSpaceRoutine writingRoutine; WORD 0"


HelpTextIdTable:

	//entries don't need to be in this exact order, but keep entry ids in sequential order
	
	#ifdef USE_HELP_TEXT_MULTIPLE_PAGES
		MultiplePageHelpTextLink:
		SHORT 0xFF01 0xFF01
		POIN DefaultHelpTextSpace
		WORD 0 0
	#endif
	
	#ifdef USE_HELP_TEXT_WEAPON_RANK
		RankHelpTextLink:
		HTITE(0xFF02,8,RankHelpTextSpace,RankHelpTextLabels,RankHelpTextValues)
	#endif
	
	#ifdef USE_HELP_TEXT_CALC
		CalcHelpTextLink:
		HTITE(0xFF0A,8,CalcHelpTextSpace,CalcHelpTextLabel,CalcHelpTextValues)
	#endif
	
	#ifdef USE_HELP_TEXT_CHARACTER
		
		CharacterHelpTextLink:
		HTITE(0xFF12,1,CharacterHelpTextSpace,CharacterHelpTextInfo)

		PromotionHelpTextLink:
		HTITE(0xFF12,8,PromotionHelpTextSpace,PromotionHelpTextLabels,PromotionHelpTextValues) //id can be shared with CharacterHelpText; range = highestNumberOfPromotions + 1 (highest number should match with MultipleHelpTextPageList_Chars)
		
	#endif
	
	HTITE(0xFFFD,1,SupportReworkReworkSpace,SupportReworkReworkLabels,SupportReworkReworkValues)

		
	SaveFileHelpTextLink:
	HTITE(0xFFFE,1,SaveFileHelpTextSpace,SaveFileHelpTextLabels,SaveFileHelpTextValues)

	WORD 0 //end of table


HelpTextTypeList:

	//If skill helptext stuff is being used, this needs to be the first entry on HelpTextTypeList
	#ifdef USE_HELP_TEXT_SKILL
		HTTLE(SkillHelpTextCheck,SkillHelpTextSpace,SkillHelpTextExtraInfo)
	#endif

	HTTLE(WeaponMagicHelpTextCheck,WeaponMagicHelpTextSpace,WeaponMagicHelpTextLabels,WeaponMagicHelpTextValues)
	
	#ifndef USE_HELP_TEXT_MORE_STAFF_INFO
		HTTLE(StaffHelpTextCheck,OneLineHelpTextSpace,StaffHelpTextInfo)
	#else
		HTTLE(StaffHelpTextCheck,MoreStaffHelpTextSpace,MoreStaffHelpTextLabels,MoreStaffHelpTextValues)
	#endif

	//end of the list
	WORD 0
	POIN DefaultHelpTextSpace
	WORD 0 0


#include "_HelpTextEssentials/HelpTextEssentials.event"

#include "ExtendWeaponDescBox/Installer.event"

#ifdef USE_HELP_TEXT_MULTIPLE_PAGES
	#include "Modules/MultipleHelpTextPages/MultipleHelpTextPages.event"
#endif

#ifdef USE_HELP_TEXT_WEAPON_RANK
	#include "Modules/WeaponRanks/WeaponRanks.event"
#endif

#ifdef USE_HELP_TEXT_CALC
	#include "Modules/Calc/Calc.event"
#endif

#ifdef USE_HELP_TEXT_CHARACTER
	#include "Modules/Character/Character.event"
#endif

#ifdef USE_HELP_TEXT_MORE_STAFF_INFO
	#include "Modules/MoreStaffInfo/MoreStaffInfo.event"
#endif

#ifdef USE_HELP_TEXT_SKILL
	#include "Modules/Skills/Skills.event"
#endif

#include "Modules/SupportReworkRework/SupportReworkRework.lyn.event"

#include "StatScreen_HelpBoxIdle/StatScreen_HelpBoxIdle.event"


