
//Note: The press "A" button functionality during stat screen is granted by StatScreen_HelpBoxIdle

//For each "thing" that can have multiple pages of help text, we need a routine/method to verify if we're checking that thing (if items can have multiple pages, how can we prove we're currently checking an item and not something else?) and a routine for seeing if said thing does have multiple pages (if items can have multiple pages, does this particular item have multiple pages?) 

MultiplePagesAllowlist:

	//Keep entry ids in sequential order (refer to HelpTextIdTable in ../HelpTextTypes.event)

	//POIN LinkInHelpTextIdTable
	//POIN RoutineToCheckForMultiplePages (WORD 0 for automatic success)

	POIN MultiplePageHelpTextLink
	WORD 0

	#ifdef USE_HELP_TEXT_CHARACTER
		POIN CharacterHelpTextLink
		POIN DoesCharHaveMultiplePages

		POIN PromotionHelpTextLink
		WORD 0
	#endif

	//end of the list (once this point is reached in CanCurrentHelpTextHaveMultiplePages, Skills and Items are checked for)
	WORD 0 

MultipleHelpTextPageList_Items:
//BYTE itemId numberOfPages
//SHORT textId1 textId2 ...

BYTE Aspect 2
SHORT DAspect DAspect2

BYTE WrathStaff 2
SHORT DWrathStaff DWrathStaff2

BYTE TheSDarkTome 3
SHORT DSDark DSDark2 DSDark3

BYTE 0 //end list with this
ALIGN 4

#ifdef USE_HELP_TEXT_CHARACTER
	MultipleHelpTextPageList_Chars:
	
	/*
	BYTE charId numberOfPromotions
	SHORT classId textIdOfBenefits
	SHORT classId2 textIdOfBenefits2
	...
	
	Units on this list must also be on CharDescList in Character.event (or else pressing "A" won't do anything)
	
	*/
	/*
	BYTE Eirika 1
	SHORT EirikaMasterLord EirkaMasterLordBenefits
	
	BYTE Ephraim 1
	SHORT EphraimMasterLord EphraimMasterLordBenefits
	
	BYTE Ross 7
	SHORT Fighter FighterBenefits
	SHORT Pirate PirateBenefits
	SHORT Journeyman_2 Journeyman2Benefits
	SHORT Hero HeroBenefits
	SHORT Warrior WarriorBenefits
	SHORT Berserker BerserkerBenefits
	SHORT Journeyman_3 Journeyman3Benefits
	*/
	BYTE 0 //end list with this
	ALIGN 4
#endif

#ifdef USE_HELP_TEXT_SKILL
	MultipleHelpTextPageList_Skills:
	//BYTE skillId numberOfPages
	//SHORT textId1 textId2 ...
	
	BYTE RoboKyID 2
	SHORT SD_RightfulGod SD_RightfulGod2
	
	
	BYTE 0 //end list with this
	ALIGN 4
#endif



//-------------------------------------------
//WIZARD CHECKPOINT
//Do not touch anything below unless you know what you're doing
//-------------------------------------------



#ifndef callHackNew 
	#define callHackNew(offset) 		"BYTE $01 $4B $9E $46 $00 $F8 $01 $E0; POIN (offset|0x1); PROTECT CURRENTOFFSET-12 CURRENTOFFSET-1"
#endif 


PUSH

ORG 0x89278
SHORT 0x4903 0x468E //ldr r1, =OverwriteHelpTextBoxPosition; mov lr, r1
SHORT 0x4641 0x1C2A //mov r1, r8; mov r2, r5
SHORT 0x1C3B 0xF800 //mov r3, r7; bl lr+0
SHORT 0xE002 0 //b 0x8928C
POIN OverwriteHelpTextBoxPosition
PROTECT 0x89278 CURRENTOFFSET-1

ORG 0x89178
jumpToHack(StartHelpTextBubble_Extension)

//shouldn't need this (MSS is already linking to the new routine for each inventory slot), but just in case
ORG 0x88A00
jumpToHack(StatScreen_HelpBoxCurrentItem)

ORG 0x88D06
SHORT 0x1C21 //mov r1, r4
PROTECT 0x88D06 CURRENTOFFSET-1
callHackNew(HelpBoxOnOpenHook)

POP


#include "asm/StartHelpTextBubble_Extension.lyn.event"
ALIGN 4

#ifdef USE_HELP_TEXT_SKILL
	#include "asm/CanCurrentHelpTextHaveMultiplePages_Skills.lyn.event"
	ALIGN 4
#else
	#include "asm/CanCurrentHelpTextHaveMultiplePages_NoSkills.lyn.event"
	ALIGN 4
#endif

#include "asm/GetMultipleHelpTextEntry.lyn.event"
ALIGN 4

#ifdef USE_HELP_TEXT_CHARACTER
	#include "asm/OverwriteHelpTextBoxPosition_Chars.lyn.event"
	ALIGN 4
#else
	#include "asm/OverwriteHelpTextBoxPosition_NoChars.lyn.event"
	ALIGN 4
#endif

#include "asm/HelpBoxOnOpenHook.lyn.event"
ALIGN 4

#include "asm/FlashIcon.lyn.event"
ALIGN 4

#include "asm/HelpTextNonStatScreenCheckButton_A.lyn.event"
ALIGN 4

HelpBoxFlashIconProc: 
PROC_YIELD // Buffer.
PROC_SET_NAME(HelpBoxFlashIconName)
PROC_LABEL(0) 
PROC_SLEEP(0)
PROC_CALL_ROUTINE(HelpBoxFlashIcon)
PROC_LABEL(1) 
PROC_END
ALIGN 4 

HelpBoxFlashIconName:
String("HelpTextFlashIcon")
BYTE 0
ALIGN 4

HelpTextNonStatScreenMultiplePageProc: 
PROC_YIELD // Buffer.
PROC_SET_NAME(HelpTextNonStatScreenMultiplePageName)
PROC_LABEL(0) 
PROC_SLEEP(0)
PROC_CALL_ROUTINE(HelpTextNonStatScreenCheckButton_A)
PROC_LABEL(1) 
PROC_END
ALIGN 4 

HelpTextNonStatScreenMultiplePageName:
String("HelpTextNonStatScreenMultiplePage")
BYTE 0
ALIGN 4


//Items

PUSH

ORG 0x88E94
POIN HelpTextGetItemDesc

POP

#include "asmItems/NextPageOfTextForItemDesc.lyn.event"
ALIGN 4

#include "asmItems/HelpTextGetItemDesc.lyn.event"
ALIGN 4

#include "asmItems/StatScreen_NextPageOfTextForItemDesc.lyn.event"
ALIGN 4

#include "asmItems/StatScreen_HelpBoxCurrentItem.lyn.event"
ALIGN 4

#include "asmItems/StatScreen_DoesItemHaveMultiplePages.lyn.event"
ALIGN 4

#ifdef USE_HELP_TEXT_CHARACTER

	#include "asmCharacters/GetMultipleHelpTextCharEntry.lyn.event"
	ALIGN 4

	#include "asmCharacters/HelpBoxCurrentCharInfo.lyn.event"
	ALIGN 4

	#include "asmCharacters/NextPageOfTextForCharInfo.lyn.event"
	ALIGN 4

	#include "asmCharacters/DoesCharHaveMultiplePages.lyn.event"
	ALIGN 4

#endif //USE_HELP_TEXT_CHARACTER

#ifdef USE_HELP_TEXT_SKILL

	#include "asmSkills/NewSkillDescGetter.lyn.event"
	ALIGN 4

	#include "asmSkills/NextPageOfTextForSkill.lyn.event"
	ALIGN 4

	#include "asmSkills/DoesSkillHaveMultiplePages.lyn.event"
	ALIGN 4

#endif //USE_HELP_TEXT_SKILL
