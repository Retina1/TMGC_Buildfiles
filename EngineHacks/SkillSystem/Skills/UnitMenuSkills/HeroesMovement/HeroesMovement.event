#ifndef HAX_HEROES_MOVEMENTS_EVENT
#define HAX_HEROES_MOVEMENTS_EVENT

#ifndef _FE8_
	ERROR HEROES MOVEMENT is for FE8
#endif // _FE8_

#include "Tools/Tool Helpers.txt"
#include "../../../../Necessary/MSG/InstallHelpers.event"

#define ACTION_MOVETARGET 0x23
#define ACTION_MOVEACTIVE 0x24
#define ACTION_SWAP       0x25
#define ACTION_PUSH       0x26
#define ACTION_SWARP	  0x27

#define TEXT_BOTTOMHELP_PIVOT      0
#define TEXT_BOTTOMHELP_REPOSITION 0
#define TEXT_BOTTOMHELP_SWAP       0
#define TEXT_BOTTOMHELP_SHOVE      0
#define TEXT_BOTTOMHELP_SMITE      0
#define TEXT_BOTTOMHELP_SWARP	   0

#ifdef HEROES_MOVEMENT_SKILL_REQUIRED

prPivotCommand_Availability:
	rGetWrapper // value defaults to 0 (False)
		rIfUnitHasNotState(US_CANTOING)
			rWithConstant(PivotID)
				rCallExternal(SkillTester)

prRepositionCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
			rWithConstant(RepositionID)
				rCallExternal(SkillTester)

prSwapCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
			rWithConstant(SwapID)
				rCallExternal(SkillTester)

prShoveCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
			rWithConstant(ShoveID)
				rCallExternal(SkillTester)

prSmiteCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
			rWithConstant(SmiteID)
				rCallExternal(SkillTester)

prSwarpCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
			rWithConstant(SwarpID)
				rCallExternal(SkillTester)
				
#else // HEROES_MOVEMENT_SKILL_REQUIRED
ALIGN 4

prPivotCommand_Availability:
	rGetWrapper // value defaults to 0 (False)
		rIfUnitHasNotState(US_CANTOING)
			rCallExternal(PivotClassCheck-1)

prRepositionCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
				rCallExternal(RepositionClassCheck-1)

prSwapCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
				rCallExternal(SwapClassCheck-1)


prShoveCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
				rCallExternal(ShoveClassCheck-1)

prSmiteCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
				rCallExternal(SmiteClassCheck-1)

prSwarpCommand_Availability:
	rGetWrapper
		rIfUnitHasNotState(US_CANTOING)
				rCallExternal(SwarpClassCheck-1)

#endif // HEROES_MOVEMENT_SKILL_REQUIRED


// checking for same allegiance
prPivot_TargetLegality:
prReposition_TargetLegality:
prSwap_TargetLegality:
prSwarp_TargetLegality:
	rGetWrapper // value defaults to 0 (False)
		rWithSubject
			rForActiveUnit
				rIfUnitsAreAllied
					rConstant(True)

prShove_TargetLegality:
prSmite_TargetLegality:
    rGetWrapper // Defaults to 0
        rIfUnitHasNotGuardAI
            rConstant(True)
		
// class lists, if enabled
#ifndef HEROES_MOVEMENT_SKILL_REQUIRED

PivotClassList:
BYTE Sniper SniperF  Assass AssassF SwdGen LncGen AxeGen BowGen ZekeLordX
BYTE 0

RepositionClassList:
BYTE Halberdier HalberdierF Dismount Rune RuneMast Trickster ViridianLord
BYTE 0

SwapClassList:
BYTE Hero HeroF SwMast SwMastF Assass AssassF Rune RuneMast Trickster
BYTE 0

ShoveClassList:
BYTE BlairLord ZekeLord ZekeLordX ViridianLord Dismount SwdArm LncArm AxeArm BowArm SwdGen LncGen AxeGen BowGen Merc MercF Hero HeroF Myrm MyrmF SwMast SwMastF Assass AssassF Archer ArcherF Sniper SniperF Mage MageF Sage SageF Bishop BishopF DarkM Sorc Rune RuneMast Trickster Hunter Deserter Bruiser Fighter Warrior FighterF WarriorF Brigand Pirate Berserker PirateF BerserkerF LightM Priest Bard BardF Cleric Soldier Halberdier SoldierF HalberdierF CivilM
BYTE 0

SmiteClassList:
BYTE Warrior WarriorF Berserker BerserkerF SwdGen LncGen AxeGen BowGen
BYTE 0

SwarpClassList:
BYTE 0
BYTE 0

#endif // HEROES_MOVEMENT_SKILL_REQUIRED

#include "HeroesMovement_Internal.event"

#endif // HAX_HEROES_MOVEMENTS_EVENT
